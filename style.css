:root {
  --primary: #4a90e2;       /* main blue */
  --bg: #ffffff;             /* background */
  --card-bg: #fefefe;        /* editor card */
  --toolbar-bg: #f8f8f8;     /* toolbar background */
  --text-color: #1c1c1c;     /* default text color */
  --status-bg: #f4f4f4;      /* status bar */
  --button-bg: #ffffff;       /* button background */
  --button-hover: #4a90e2;    /* hover color */
  --button-hover-text: #fff;  /* text on hover */
  --border-color: #e0e0e0;    /* subtle border for editor/card */
  --shadow-color: rgba(0,0,0,0.08); /* soft shadow */
}

body.minimal-dark {
  --primary: #4a90e2;
  --bg: #1e1e1e;
  --card-bg: #252525;
  --toolbar-bg: #2a2a2a;
  --text-color: #eaeaea;
  --status-bg: #1c1c1c;
  --button-bg: #333;
  --button-hover: #4a90e2;
  --button-hover-text: #fff;
  --border-color: #444;
  --shadow-color: rgba(0,0,0,0.3);
}


* { box-sizing: border-box; }

body {
  margin: 0;
  font-family: "Inter", sans-serif;
  background: var(--bg);
  color: var(--text-color);
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

header {
  background: var(--primary);
  color: #fff;
  padding: 15px 20px;
  font-size: 1.4rem;
  font-weight: 600;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 1px 4px rgba(0,0,0,0.1);
  border-radius: 0 0 12px 12px;
}

header button {
  background: var(--button-bg);
  border: none;
  border-radius: 8px;
  padding: 6px 12px;
  cursor: pointer;
  transition: 0.2s;
}

header button:hover { background: var(--button-hover); }

.editor-container {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 15px;
}

.editor-card {
  width: 100%;
  max-width: 900px;
  background: var(--card-bg);
  border-radius: 12px;
  border: 1px solid var(--border-color);   /* subtle border */
  box-shadow: 0 8px 16px var(--shadow-color);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  transition: background 0.3s, color 0.3s;
}

.toolbar {
  background: var(--toolbar-bg);
  padding: 8px;
  display: flex;
  flex-wrap: wrap; /* allow wrapping only if absolutely necessary */
  gap: 6px;
  border-bottom: 1px solid rgba(0,0,0,0.05);
  justify-content: space-between; /* spread buttons evenly */
  align-items: center;
}

.toolbar button, .toolbar select, .toolbar input[type="color"] {
  padding: 6px 10px;
  border-radius: 6px;
  font-size: 14px;
  height: 32px;
  flex: 1 1 auto;
  min-width: 50px;
  background: var(--button-bg);
  color: var(--text-color);
  border: 1px solid var(--border-color);  /* subtle border */
  box-shadow: 0 1px 3px var(--shadow-color);
  transition: all 0.2s ease;
}

.toolbar button:hover,
.toolbar select:hover,
.toolbar input[type="color"]:hover {
  background: var(--button-hover);      /* blue hover */
  color: var(--button-hover-text);      /* text white on hover */
  border-color: var(--primary);         /* border also blue on hover */
  box-shadow: 0 2px 6px var(--shadow-color);
}


.editor {
  border: 1px solid var(--border-color);  /* subtle border around editor */
  border-radius: 6px;
  transition: border-color 0.3s, box-shadow 0.3s;
  flex: 1;
  padding: 20px;
  outline: none;
  font-size: 16px;
  line-height: 1.6;
  color: var(--text-color);
  width: 100%;
  min-height: 400px;
  overflow-y: auto;
  white-space: pre-wrap;
  transition: background 0.3s, color 0.3s;
}

.editor:focus {
  border-color: var(--primary);           /* blue border on focus */
  box-shadow: 0 0 8px var(--primary);
}

.statusbar {
  background: var(--status-bg);
  padding: 8px 15px;
  font-size: 14px;
  text-align: right;
  border-top: 1px solid rgba(0,0,0,0.05);
}
/* === Glowing Background Animation === */
#bgCanvas {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  pointer-events: none; /* so you can still click buttons */
  z-index: -1;
}

/* === Button Hover Effects === */
.toolbar button {
  transition: all 0.25s ease;
}

.toolbar button:hover {
  background: var(--primary);
  color: white;
  transform: scale(1.05);
  box-shadow: 0 0 12px var(--primary);
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  header { font-size: 1.2rem; }
  .toolbar { justify-content: center; }
  .toolbar button, .toolbar select, .toolbar input[type="color"] { flex: 1 1 45%; }
  .editor { min-height: 300px; }
}
@media (max-width: 480px) {
  header { font-size: 1rem; padding: 10px; }
  .toolbar button, .toolbar select, .toolbar input[type="color"] { flex: 1 1 100%; }
  .editor { min-height: 250px; padding: 15px; font-size: 14px; }
}

/* === Animated Gradient Background === */
body {
  background: radial-gradient(circle at 30% 30%, #0d1117, #010409);
  background-size: 400% 400%;
  animation: subtleShift 20s ease infinite;
  transition: background 0.5s ease;
}

@keyframes subtleShift {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

/* === Ambient Floating Lights === */
class AmbientLight {
  constructor(x, y, radius, color, speedX, speedY) {
    this.x = x;
    this.y = y;
    this.radius = radius;
    this.color = color;
    this.speedX = speedX;
    this.speedY = speedY;
  }
  draw() {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    ctx.fillStyle = this.color;
    ctx.shadowColor = this.color;
    ctx.shadowBlur = 40;
    ctx.fill();
  }
  update() {
    this.x += this.speedX;
    this.y += this.speedY;

    // bounce gently off screen edges
    if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
    if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;

    this.draw();
  }
}

const ambientLights = [];
for (let i = 0; i < 3; i++) {
  ambientLights.push(
    new AmbientLight(
      Math.random() * canvas.width,
      Math.random() * canvas.height,
      80,
      'rgba(74, 144, 226, 0.08)', // very faint blue
      (Math.random() - 0.5) * 0.2,
      (Math.random() - 0.5) * 0.2
    )
  );
}

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // draw faint ambient lights first
  ambientLights.forEach(light => light.update());
  // then the cursor-following bright lights
  lights.forEach(light => light.update());

  requestAnimationFrame(animate);
}




